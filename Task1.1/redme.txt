1.1 Задание

Разработать консольную программу, позволяющую принять от пользователя 3 строки, и записать эти 3 строки в 3 файла в папке,
из которой запущена программа. 1-я строка в файл task1.txt, 2-я строка в файл taskN1.txt, 3-я строка в файл task_1.txt. 

Запись в файлы должна производиться в паралелльных потоках, по завершении которых пользователю должно показаться сообщение Success,
если все прошло без ошибок, либо Failure, если была хотя бы одна ошибка хотя бы в одном потоке. 

Использование различных имен файлов для различных строк реализовать используя наследование, полиморфизм и паттерн "шаблонный метод". 

Вывод запросов на ввод строки должен производиться объектами классов, реализующих полиморфное поведение.
Результат пользовательского ввода также должен храниться в этих объектах.
Запросы на ввод строки должны выводиться последовательно,
один за другим, в виде "Input string 1: ", "Input string 2: ", "Input string 3: ".
Пользователь должен увидеть сообщения о вводе в "натуральном" порядке (1, 2, 3) независимо от того,
какой из объектов каким по очереди запрашивает ввод (т.е. если требования поменяются так,
что 1-я строка должна записываться в файл taskN1.txt, а 2-я в файл task1.txt,
то от программиста потребуется только поменять порядок работы с соответствующими объектами, но не менять код полиморфных классов).

Все произошедшие ошибки залогировать в файл task1.log, используя любую библиотеку для логирования в .NET.
Библиотеку подключить используя NuGet. Для возможности тестирования логирования написать генератор случайных ошибок, генерирующий ошибки с вероятностью 1/3 вместо записи любой из строк в файл. Ошибка (случайная или реальная) при записи одной их строк не должна помешать записи других строк.

Подсказки и пожелания: 

- При реализации многопоточности, сравнить методы Task.WaitAll, Task.WhenAll, Parallel.ForEach -
какие из них гарантированно обеспечивают многопоточность? Какие только при определенных условиях?
Какой подход в целом целесообразнее? 
- Разобраться с понятием async метод, с работой await. Легче будет использовать версию C# >= 7.1
(там можно написать async Main метод).
- Популярные библиотеки для логирования - NLog и log4net. Можно выбрать любую другую.
- Нет большой необходимости создавать много проектов и файлов для решения этой задачи,
в принципе позволительно обойтись один файлом / классом, с вложенными в него подклассами.
Но можно и создать несколько независимых файлов, если так проще или удобнее.
- Номера (1, 2, 3), выводящиеся пользователю при запросе ввода,
стоит хранить в статическом поле базового класса и увеличивать на 1 после каждого запроса ввода.
В базовом же классе стоит реализовать почти весь функционал по запросу ввода, хранению ввода, записи в файл,
генерации ошибки, логированию и т.д., только имена файлов стоит отдать на откуп наследникам.
- Наступление случайного события с вероятностью 1/3 можно симулировать, используя класс Random.